Function Description
====================
Wed Apr 28 15:12:03 CEST 2004
 
Overview of all Functions
-------------------------

M22_Init               - Allocate and return low-level handle, initialize hardware. 
M22_Exit               - De-initialize hardware and clean up memory. 
M22_Read               - Read from the device. 
M22_Write              - Set/reset the output switch of the current channel. 
M22_SetStat            - Changes the device state. 
M22_GetStat            - Gets the device state. 
M22_BlockRead          - Reads active channels to buffer. 
M22_BlockWrite         - Writes buffer to active channels. 
M22_Irq                - The irq routine reads all channels. 
M22_Info               - Gets low-level driver info. 
 

Function M22_Init()
-------------------

Syntax:
    static int32 M22_Init
    (
        DESC_SPEC       *descSpec,
        OSS_HANDLE      *osHdl,
        MACCESS         *ma,
        OSS_SEM_HANDLE  *devSem,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **llHdlP
    )

Description:
    Allocate and return low-level handle, initialize hardware.
    Reads and checks the ID, detects hardware type of M22 or M24.
    Clears and disables the M-Module interrupts.
    Switches off all outputs of the M22.

    Descriptor Key                Default            Range/Unit
    --------------                -------            ----------
    DEBUG_LEVEL_DESC              OSS_DBG_DEFAULT    see oss_os.h
    DEBUG_LEVEL                   OSS_DBG_DEFAULT    see oss_os.h

    CHANNEL_%d/INACTIVE           0                  0..1 0 - active 
                                            1 - not active
                                        %d    0..7..15

    CHANNEL_%d/INPUT_EDGE_MASK    0                  0..3 0 - disabled
                                            1 - rising edge
                                            2 - falling edge
                                            3 - any edge
                                        %d    0..7..15

    CHANNEL_%d/ALARM_EDGE_MASK    0                  0..3 0 - disabled (M22 only)
                                            1 - rising edge
                                            2 - falling edge
                                            3 - any edge
                                        %d    0..7

    Note:  Is called by MDIS kernel only.

Input:
    descSpec descriptor specifier
    osHdl    pointer to the os specific structure
    ma       access handle (in simplest case M22 base address)
    devSem   device semaphore for unblocking in wait
    irqHdl   IRQ handle for mask and unmask interrupts
    llHdlP   pointer to the variable where low-level driver
             handle will be stored

Output:
    *llHdlP  low-level driver handle
    return   0 | error code


Function M22_Exit()
-------------------

Syntax:
    static int32 M22_Exit
    (
        LL_HANDLE **llHdlP
    )

Description:
    De-initialize hardware and clean up memory.

    Note:  Is called by MDIS kernel only.

Input:
    llHdlP  pointer to low-level driver handle

Output:
    llHdlP  NULL
    return  0 | error code


Function M22_Read()
-------------------

Syntax:
    static int32 M22_Read
    (
        LL_HANDLE   *llHdl,
        int32       ch,
        int32       *valueP
    )

Description:
    Read from the device.
    Reads input and output switch state and edge occurred flags
    from current channel.

    byte structure of the LSB

    bit            7       6       5       4       3       2       1       0
    +-------+-------+-------+-------+-------+-------+-------+-------+
    meaning    |   OS  |   r   |   r   |   r   |   r   |   FE  |   RE  |   I   |
    +-------+-------+-------+-------+-------+-------+-------+-------+

    OS:  output switch state
    FE:  falling edge occurred
    RE:  rising edge occurred
    I:   input state
    r:   reserved

Input:
    llHdl   pointer to low-level driver data structure
    ch      current channel 0..7..15
    valueP  pointer to variable where read value is stored

Output:
    *valueP  read value
    return   0 always


Function M22_Write()
--------------------

Syntax:
    static int32 M22_Write
    (
        LL_HANDLE *llHdl,
        int32  ch,
        int32  value
    )

Description:
    Set/reset the output switch of the current channel.

    byte structure of the LSB

      bit            7       6       5       4       3       2       1       0
                 +-------+-------+-------+-------+-------+-------+-------+-------+
      meaning    |   r   |   r   |   r   |   r   |   r   |   r   |   r   |   OS  |
                 +-------+-------+-------+-------+-------+-------+-------+-------+

                 OS:  output switch state
                 r:   reserved, should be 0

    Note:  This function returns ERROR if M24 or channel is inactive.

Input:
    llHdl   pointer to low-level driver data structure
    ch      current channel 0..7..15
    value   output switch on/off    0=off, 1=on

Output:
    return  0 | error code


Function M22_SetStat()
----------------------

Syntax:
    static int32 M22_SetStat
    (
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        int32  value
    )

Description:
    Changes the device state.

    COMMON CODES
    ============

    Code                         Values          Meaning
    ----                         ------          -------
    M_MK_IRQ_ENABLE              0               disable module interrupt
                                 1               enable module interrupt
                                                 by writing input/alarm edge mask
                                                 of each active channel

    M_LL_CH_DIR                  M_CH_INOUT      fix M22
                                 M_CH_IN         fix M24

    M_LL_DEBUG_LEVEL             see oss.h       enable/disable debug output
                                                 at task or interrupt level

    M_LL_IRQ_COUNT               irq count       set the module interrupt counter

    SPECIFIC CODES
    ==============

    Code                         Values          Meaning
    ----                         ------          -------
    M22_24_INPUT_EDGE_MASK       0..3            bit 0 - rising edge
                                                 bit 1 - falling edge

    M22_ALARM_EDGE_MASK          0..3            bit 0 - rising edge
                                                 bit 1 - falling edge

    M22_24_SIG_EDGE_OCCURRED     signal number   installs signal sent by ISR

    M22_24_SIG_CLR_EDGE_OCCURRED signal number   deinstalls signal

    M22_24_CLEAR_INPUT_EDGE      -               clears input edges of current ch

    M22_24_SETBLOCK_CLEAR_INPUT_EDGE -           clears input edges of all ch

    M22_CLEAR_ALARM_EDGE          -              clears alarm edges of current ch
                                                 M22 only

    M22_SETBLOCK_CLEAR_ALARM_EDGE    -           clears alarm edges of all ch
                                                 M22 only

    M22_24_CHANNEL_INACTIVE      0..1            0 - activate channel
                                                 1 - deactivate channel

Input:
    llHdl  pointer to low-level driver data structure
    code   setstat code
    ch     current channel (ignored for some codes)
    value  setstat value or pointer to block setstat data

Output:
    return 0 | error code


Function M22_GetStat()
----------------------

Syntax:
    static int32 M22_GetStat
    (
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        int32  *valueP
    )

Description:
    Gets the device state.

    COMMON CODES
    ============

    Code                         Values          Meaning
    ----                         ------          -------
    M_LL_CH_NUMBER               8 | 16          number of channels

    M_LL_CH_DIR                  M_CH_INOUT      direction of current ch
                                 M_CH_IN         always in/out | in

    M_LL_CH_LEN                  1               length in bits

    M_LL_CH_TYP                  M_CH_BINARY     binary

    M_LL_IRQ_COUNT               0..x            module irq count

    M_LL_ID_CHECK                1               SPROM ID is always checked

    M_LL_DEBUG_LEVEL             see oss.h       current debug level

    M_LL_ID_SIZE                 128             eeprom size [bytes]

    M_LL_BLK_ID_DATA             -               eeprom raw data
       blockStruct->size         0..0x80         number of bytes to read
       blockStruct->data pointer                 user buffer containing ID data

    M_MK_BLK_REV_ID                              pointer to the ident function table

    SPECIFIC CODES
    ==============

    Code                         Values          Meaning
    ----                         ------          -------
    M22_24_IRQ_SOURCE            irq source      irq-causing channel

    M22_24_CHANNEL_INACTIVE      0..1            0 - channel is active
                                                 1 - channel is inactive

    M22_24_INPUT_EDGE_MASK       0..3            bit 0 - rising edge
                                                 bit 1 - falling edge
                                                 get the edge mask of the current
                                                 channel

    M22_ALARM_EDGE_MASK          0..3            bit 0 - rising edge
                                                 bit 1 - falling edge
                                                 get the edge mask of the current
                                                 channel

    M22_24_SIG_EDGE_OCCURRED     signal number   get the signal number
                                                 0 if not installed

    M22_GET_ALARM                0..7            gets the alarm state of
                                                 the current channel
                                                 bit 0 - alarm state
                                                 bit 1 - rising alarm edge
                                                 bit 2 - falling alarm edge
                                                 M22 only

    M22_GETBLOCK_ALARM                           gets the alarm state of all
                                                 active channels
       blockStruct->size         0..8            number of bytes to read
       blockStruct->data pointer                 user buffer containing the
                                                 alarm data (starting with ch #0)
                                                 M22 only

Input:
    llHdl    pointer to low-level driver data structure
    code     getstat code
    ch       current channel (ignored for some codes)
    valueP   pointer to variable where value is stored or
             pointer to block setstat data

Output:
    *valueP  getstat value
    return   0 | error code


Function M22_BlockRead()
------------------------

Syntax:
    static int32 M22_BlockRead
    (
        LL_HANDLE  *llHdl,
        int32     ch,
        void      *buf,
        int32     size,
        int32     *nbrRdBytesP
    )

Description:
    Reads active channels to buffer.
    Stores input state and occurred edges.
    Starts with the lowest active channel number.

    buffer structure

    byte              0            ...            n
    +------------------+-     -+-------------------+-
    channel  | lowest active ch |  ...  | highest active ch | 
    +------------------+-     -+-------------------+-

    byte structure

    bit          7       6       5       4       3       2       1       0
    +-------+-------+-------+-------+-------+-------+-------+-------+
    meaning  |   OS  |   r   |   r   |   r   |   r   |   FE  |   RE  |   I   |
    +-------+-------+-------+-------+-------+-------+-------+-------+

    OS:  output switch state
    FE:  falling edge occurred
    RE:  rising edge occurred
    I:   input state
    r:   reserved

Input:
    llHdl        pointer to low-level driver data structure
    ch           current channel (always ignored)
    buf          buffer to store read values
    size         buffer size
    nbrRdBytesP  pointer to variable where number of read bytes
                 will be stored

Output:
    *nbrRdBytesP number of read bytes
    return       0 | error code


Function M22_BlockWrite()
-------------------------

Syntax:
    static int32 M22_BlockWrite
    (
        LL_HANDLE  *llHdl,
        int32     ch,
        void      *buf,
        int32     size,
        int32     *nbrWrBytesP
    )

Description:
    Writes buffer to active channels.
    Starts with the lowest active channel number.

    buffer structure

    byte              0            ...            n
    +------------------+-     -+-------------------+-
    channel  | lowest active ch |  ...  | highest active ch | 
    +------------------+-     -+-------------------+-

    byte structure

    bit          7       6       5       4       3       2       1       0
    +-------+-------+-------+-------+-------+-------+-------+-------+
    meaning  |   r   |   r   |   r   |   r   |   r   |   r   |   r   |   OS  |
    +-------+-------+-------+-------+-------+-------+-------+-------+

    OS:   output switch state
    r:    reserved, should be 0

Input:
    llHdl        pointer to low-level driver data structure
    ch           current channel (always ignored)
    buf          buffer 
    size         buffer size
    nbrWrBytesP  pointer to variable where number of written bytes
                 will be stored

Output:
    *nbrWrBytesP number of read bytes
    return       0 | error code


Function M22_Irq()
------------------

Syntax:
    static int32 M22_Irq
    (
        LL_HANDLE *llHdl
    )

Description:
    The irq routine reads all channels.
    It stores the input states and the occurred edges to the
    read buffer if available.

    The function clears the edge flag registers.
    If the signal is installed (setstat code M22_SIG_EDGE_OCCURRED)
    this is sent.

    The function clears the M-Module IRQ and stores the number of
    the channel that triggered the interrupt.
    (getstat code M22_IRQ_SOURCE)

    The function increments the M-Module irq counter if an edge was
    detected.
    (getstat code M_LL_IRQ_COUNT)

Input:
    llHdl  pointer to low-level driver data structure

Output:
    return MDIS_IRQ_DEV_NOT | MDIS_IRQ_DEVICE


Function M22_Info()
-------------------

Syntax:
    static int32 M22_Info
    (
       int32  infoType,
       ...
    )

Description:
    Gets low-level driver info.

    NOTE: can be called before M22_Init().

Input:
    infoType
    ...       variable argument list

    supported info type codes:        value          meaning

    LL_INFO_HW_CHARACTER
    arg2  u_int32 *addrModeCharP    MDIS_MODE_A08  M-Module characteristic
    arg3  u_int32 *dataModeCharP    MDIS_MODE_D08  M-Module characteristic

    LL_INFO_ADDRSPACE_COUNT
    arg2  u_int32 *nbrOfAddrSpaceP  1              number of used address spaces

    LL_INFO_ADDRSPACE
    arg2  u_int32  addrSpaceIndex   0              current address space
    arg3  u_int32 *addrModeP        MDIS_MODE_A08  not used
    arg4  u_int32 *dataModeP        MDIS_MODE_D16  driver use D16 access
    arg5  u_int32 *addrSizeP        0x100          needed size

    LL_INFO_IRQ
    arg2  u_int32 *useIrqP          1              module uses interrupts

Output:
    0 | error code

